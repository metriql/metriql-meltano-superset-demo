name: meltano

on:
  # repository_dispatch:
  #   types: [trigger_meltano_elt]
  workflow_dispatch:
  push:
    branches:
      - main

env:
  TAP_FACEBOOK_ACCOUNT_ID:          ${{ secrets.TAP_FACEBOOK_ACCOUNT_ID }}
  TAP_FACEBOOK_ACCESS_TOKEN:        ${{ secrets.TAP_FACEBOOK_ACCESS_TOKEN }}
  TAP_FACEBOOK_RESULT_RETURN_LIMIT: 500
  SF_ACCOUNT:                       ${{ secrets.SF_ACCOUNT }}
  SF_USER:                          ${{ secrets.SF_USER }}
  SF_PASSWORD:                      ${{ secrets.SF_PASSWORD }}
  SF_ROLE:                          MARKETING
  SF_DATABASE:                      ${{ secrets.SF_DATABASE }}
  SF_WAREHOUSE:                     ${{ secrets.SF_WAREHOUSE }}
  VAR_FB_EL_START_DATE:             '2019-12-08T00:00:00Z'
  VAR_FB_EL_END_DATE:               '2020-01-12T00:00:00Z'
  DBT_TARGET:                       snowflake
  DBT_TARGET_SCHEMA:                DBT_MMS_DEMO

jobs:
  meltano_elt:
    name: meltano ELT
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: buremba/get-changed-files-with-regex@0.5
        if: github.event_name == 'push' # only valid when a new commit is pushed
        name: Changed Files Exporter with Regex
        id: changedfiles
        with:
          token: ${{ github.token }}
          pattern: '.+'
      - name: Install meltano
        run: |
          sudo apt update && sudo apt install python3-pip && pip3 install --upgrade pip
          pip3 install meltano
          meltano install
      - name: Run the extract, load and transform
        run: |
          meltano elt tap-facebook target-snowflake
          echo "Extract-load completed successfully!"
      - name: Install dbt Dependencies
        run: meltano invoke dbt:deps
      - name: Run dbt compile # perform full-refresh for new/modified models
        if: github.event_name == 'push'
        run: meltano invoke dbt:compile
      - name: Run ELT [Scheduled]
        if: github.event_name == 'schedule'
        run: meltano elt tap-facebook target-snowflake && meltano invoke dbt:compile
      # to-do: save dbt manifest to a persistent storage
