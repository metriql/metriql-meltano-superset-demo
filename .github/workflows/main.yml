name: meltano

on:
  # repository_dispatch:
  #   types: [trigger_meltano_elt]
  workflow_dispatch:
  push:
    branches:
      - main

env:
  TAP_FACEBOOK_ACCOUNT_ID:          ${{ secrets.TAP_FACEBOOK_ACCOUNT_ID }}
  TAP_FACEBOOK_ACCESS_TOKEN:        ${{ secrets.TAP_FACEBOOK_ACCESS_TOKEN }}
  TAP_FACEBOOK_RESULT_RETURN_LIMIT: 500
  SF_ACCOUNT:                       ${{ secrets.SF_ACCOUNT }}
  SF_USER:                          ${{ secrets.SF_USER }}
  SF_PASSWORD:                      ${{ secrets.SF_PASSWORD }}
  SF_ROLE:                          ${{ secrets.SF_ROLE }}
  SF_DATABASE:                      ${{ secrets.SF_DATABASE }}
  SF_WAREHOUSE:                     ${{ secrets.SF_WAREHOUSE }}
  VAR_FB_EL_START_DATE:             ${{ secrets.VAR_FB_EL_START_DATE }} #'2019-12-08T00:00:00Z'
  VAR_FB_EL_END_DATE:               ${{ secrets.VAR_FB_EL_END_DATE }} #'2020-01-12T00:00:00Z'
  DBT_TARGET_SCHEMA:                DBT_MMS_DEMO

jobs:
  meltano_elt:
    name: meltano ELT
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      # Installs Python 3.8
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Installs Postgres, Meltano, and Meltano plugins
      - name: Install Meltano and project plugins
        run: |
          apt-get update && apt-get install libpq-dev
          pipx install meltano
          meltano install
      - name: Sanity check
        run: |
          meltano invoke --dump=catalog tap-facebook
          meltano discover loaders
      - name: Run the extract and load
        run: |
          meltano --log-level=debug elt tap-facebook target-snowflake --job_id=fb-ads-to-snowflake
          echo "Extract-load completed successfully!"
      - name: Install dbt Dependencies
        run: meltano invoke dbt:deps
      - name: Run dbt compile
        run: meltano invoke dbt:compile
      - name: Run ELT [Scheduled]
        if: github.event_name == 'schedule'
        run: meltano elt tap-facebook target-snowflake && meltano invoke dbt:compile
      # to-do: save dbt manifest to a persistent storage
